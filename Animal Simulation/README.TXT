Project: Animal Simulation
Author: Gunamay Sachdev

This is a simulation that represents the life cycle of 5 different species: mice, birds, bears,
Snakes and jaguars. This simulation models the food chain between this 5 species, and accounts for multiple external factors such as weather and disease.

For the simulation, we decided to use three predators and two prey. For the predators, we chose to simulate bears, jaguars and snakes. For the prey, we decided to simulate mice and birds. Mice are represented on the field as orange, snakes as blue, bears as magenta, jaguars as green, and birds as red. We created an abstract superclass called ‘Animal’ which contains some characteristics and actions that the subclasses would inherit, such the animal’s food level and whether they are female or not. We then created two subclasses, called ‘Prey’ and ‘Predator’. These would be a superclass to each individual animal class. We then proceed to create each individual animal class and initialise all the characteristics of that particular animal in the constructor.
In the simulation, each animal must eat something in order to survive. Jaguars eat birds, bears eat mice, and snakes eat both birds and mice. Mice feed on grass in order to survive whilst birds feed on daisies. Plants are assumed to be always available and not simulated on the grid. Each animal has a gender, either male or female. An animal can only breed if a male and a female animal meet in a neighbouring cell and are the same type of animal and have a high enough food level. This is implemented in each individual animal class, where the canBreed () method checks to see if they can breed. If it returns false, the animal cannot breed, but if it returns true, the breed () method is invoked. The breed () generates a random number between 0 and 1, and it returns the number of births that particular animal can give. The giveBirth () method is then executed, which identifies the vacant neighbouring cells around the animal and fills them up with the offspring.
The time of day is tracked in the simulation, with one step counting as one hour out of a 24 hour day (24 steps = 24 hours). Each animal has a particular time of day that they go to sleep at, and the duration of time that they sleep for. The values for each animal are initialised in the constructor of each particular animal class. If the animal is asleep, they do not move and stay in their cell that they went to sleep in for the duration of their sleep. Each animal has different timings at which they sleep at and varying durations of sleep. For example, snakes go to sleep at 4am and sleep for 19 hours, which implies that they wake up at 10pm and are active until 4am, a total of 6 hours.
   
 A list and description of all extension tasks you have implemented:
The first extension task we implemented was simulating plants in the project. Firstly, we created a superclass called ‘plants’ that would contain all the variables and methods each type of plant in the simulation would have. We gave each plant a boolean variable that checks if they are alive, as well as a variable called foodValue that stores the food value of each type of plant that it gives to the animal when consumed. We then created two subclasses, called ‘Daisy’ and ‘Grass’ in which the food values of those plants were initialised in the constructor. We programmed as such that mice feed on grass in order to survive whilst birds feed on daisies. Each step a mouse or bird takes without finding food, their food level decrements by one, but if they find food, their food level increases. If an animal’s food level reaches 0, they die.
The second task we implemented was simulating weather and disease. We came up with the idea that any type of weather occurrence could happen randomly, and when the weather occurrence occurs, there is a probability of the animal getting the disease. In order to implement this, we firstly created a superclass called ‘weather’ and a subclass called ‘Rain’. We could have used one single class, ‘Rain’ but we decided to use inheritance so in the future if the weather simulation was to be extended by implementing different types of weather occurrences, it would be much easier to do so. In the Weather class, we created some variables such as the duration, the probability of it occurring, and the probability of an animal getting the disease, and in the Rain class, we initialised them in the constructor.
We decided to make the rain last for 10 steps, so we used a variable called ‘counter’, which would track the number of steps of rain left. In the rain class, there is a method act () that checks if it is raining or not, and carries out some actions. If it is not raining, it will generate a random number and check if it is less than the rain probability. If it is, then rain occurs, but if the probability is greater than rain probability, then rain doesn’t occur. If it is raining when the act method is called, the counter decrements, and the process repeats until it reaches 0 on the counter, and it stops raining.
Afterwards, we created a disease class. We created and initialised the variables such as the duration of the disease and the probability of spreading the infection. We decided on implementing the disease in a way that when it is raining the animals have a chance to get infected by it. To do this whenever it is raining we check for each animal object using RNG and the probability value from the rain class. If the animal is infected we create an object of the disease class and attach it to the animal and set the time it should stay infected for. Whilst an animal is infected during each step it increments hunger and age a second time, this leads to them dying off faster. The animals also check for nearby animals and have a small chance to spread the disease to them as well.
 



How to start:
    Create a Simulator object.
    Then call one of:
        + simulateOneStep - for a single step.
        + simulate - and supply a number (say 10) for that many steps.
        + runLongSimulation - for a simulation of 500 steps.
